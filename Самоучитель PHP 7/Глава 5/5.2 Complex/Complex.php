<?php
    //Класс комплексных чисел
    class Complex{
        public $re;   //действительная часть числа
        public $im;   //мнимая часть числа
        //конструктор класса с принимающими аргументами действительной и мнимой части
        public function __construct($re,$im){
            $this->re = $re;
            $this->im = $im;
        }
        //модуль комплексного числа - находится как корень квадратный из суммы квадратов действительной и мнимой части
        function module(){
            return sqrt($this->re*$this->re + $this->im*$this->im);
        }
        //аргумент комплексного числа (греческая фи) - угол на комплексной плоскости, находится по-разному в зависимости от четверти на плоскости
        function arg(){
            //если действительная часть положительная - аргумент равен арктангенсу отношения мнимой части числа к вещественной в радианах
            if($this->re > 0){
                return atan($this->im/$this->re);
            }
            //если действительная часть числа отрицательная
            else if($this->re < 0){
                //а мнимая положительная
                if($this->im > 0)
                //к аргументу добавляем константу ПИ
                    return pi() + atan($this->im/$this->re);
                //если мнимая - отрицательная
                else if($this->im < 0)
                //отнимаем -ПИ
                    return -pi() + atan($this->im/$this->re);
                //если мнимой части нет - это вещественное число, угол лежит на вещественной прямой и он равен 0
                else return 0;
            }
            //если действительная часть числа равна нулю
            else if($this->re == 0){
                //а мнимая больше нуля
                if($this->im > 0)
                //угол равен 45 градусов или ПИ/2 радиан
                  return pi()/2;
                  //если мнимая часть меньше нуля
                else if($this->im < 0)
                //угол -ПИ/2 радиан
                    return -pi()/2;
                else if($this->im == 0)
                //угол фи для числа 0 не определен
                    return null;
            }
        }
        //функция возвращает текстовое представление числа: если form == true - возвращается алгебраическая форма: re +i*im
        //если form == false - возвращается тригонометрическая форма: |z|(cos(фи) + i*sin(фи))
        function toStr($form = true) {
            if($form == true){
                //если мнимая часть больше нуля
                if($this->im > 0)
                //перед мнимой частью ставим плюс
                    return "$this->re + {$this->im}i";
                //если мнимая часть меньше нуля - просто выводим его - минус поставится сам
                else if($this->im < 0)
                    return "{$this->re} {$this->im}i";
                //если мнимой части нет - это вещественное число, выводим re часть
                else 
                    return "$this->re"; 
            }
            else if($form == false){
                //если число не 0 - его arg не null
                if(!is_null($arg = $this->arg()))
                    //выводим тригонометрическую форму
                    return $this->module()."(cos($arg) + i*sin($arg)";
                //иначе выводим 0
                else return "0";
            }
        }
        //сумма чисел
        function plus($num){
            //если num - это объект Complex, а не стандартный тип
            if(gettype($num) == "object")
            //возвращаем новое комплексное число, просуммировав мнимые и действительные части текущего числа с num
                return new Complex($this->re + $num->re, $this->im + $num->im);
            else //иначе это вещественное число, тогда прибавляем его значение к действительной части и возвращаем новое комплексное число
                return new Complex($this->re +(double)$num,$this->im);
        }
        //умножение чисел
        function mult($num){
            //если num - объект Complex
            if(gettype($num) == "object")
            //возвращаем новое комплексное число, перемножив скобочно вещественные и мнимые части
                return new Complex($this->re * $num->re - $this->im * $num->im, $this->re *$num->im + $num->re * $this->im);
            else //иначе это действительное число и на него надо просто умножить реальную и мнимую часть
                return new Complex($this->re * $num, $this->im * $num);
        }
        //деление чисел
        function div($num){
            //если num - комплексное число
            if(gettype($num) == "object"){
                //для деления комплексных чисел будем использовать тригонометрическую форму, для этого надо найти модули и аргументы чисел
                $abs1 = $this->module();  //модуль текущего числа
                $abs2 = $num->module();  //модуль числа num
                $arg1 = $this->arg();    //аргумент текущего числа
                $arg2 = $num->arg();     //аргумент числа num
                //проверка деления и умножения на ноль 
                if($abs2 != 0 && !is_null($arg1) && !is_null($arg2)){
                    return new Complex($abs1/$abs2 * cos($arg1-$arg2), $abs1/$abs2*sin($arg1-$arg2));
                }//если текущее число ноль и второе не ноль, то в итоге получаем ноль, для совместимости вернем его в виде объекта комплексного числа
                else if($abs1 == 0 && !is_null($arg2)){
                    return new Complex(0,0);
                } //если получается деление на ноль - возвращаем null
                else if(is_null($arg2)) return null;

            }//если num - обычное число и не ноль
            else if($num != 0)
            //возвращаем комплексное число, компоненты которого будут поделены на число num
                return new Complex($this->re / $num, $this->im / $num);
            //если происходит деление на ноль возвращаем null
            else return null;
            
        }
    }